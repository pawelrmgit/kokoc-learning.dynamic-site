<?php

/*

Задание 1: разместить строчки кода ниже и вызвать в браузере ваш первый php-скрипт:

echo "Hello world!";

*/



/*

Задание 2: Повторить весь код из роликов раздела "Материалы на обучение"

*/

//Изучение PHP для начинающих | Урок #3 - Пишем "Hello World!"



//Изучение PHP для начинающих | Урок #4 - Комментарии в PHP



//Изучение PHP для начинающих | Урок #5 - Переменные и их типы



//Изучение PHP для начинающих | Урок #6 - Константы



//Изучение PHP для начинающих | Урок #7 - Арифметические операции



//Изучение PHP для начинающих | Урок #8 - Строковые операции



//Изучение PHP для начинающих | Урок #9 - Логические операции



//Изучение PHP для начинающих | Урок #10 - Оператор эквивалентности



//Изучение PHP для начинающих | Урок #11 - Условные операторы



//Изучение PHP для начинающих | Урок #13 - Циклы For, While и Do While



/*

Задание 3: Задачи на написания линейных алгоритмов. Необходимо сделать/нарисовать сначала блок-схему, затем воспроизвести блок-схему в коде на php.

3a. Посчитать и вывести на экран чему равен периметр четырехугольника. Дано сторона a=5, сторона b=3, сторона c=5, сторона d=11.

*/



/*

3b. посчитать и вывести на экран значение S. Дано S = (a + b)^2, a = 7x, b=21x, x = ½

*/



/*

Задание 4: Задачи на написание вариативных алгоритмов (if...else)

4a. Посчитать площадь трапеции если переменная $Why заданная пользователем в начале сценария истина и периметр трапеции если эта переменная ложь. Значения необходимые для расчета площади и периметра задайте самостоятельно.

*/



/*

4b. Доработать предыдущую задачу добавив проверку корректности вводимых данных пользователем. Если данные введены некорректно, то сообщить об этом и не производить расчеты.
Подсказка: для проверки корректности вводимых данных, рекомендуется сравнить введенное значение и вычисленное значение высоты.

*/



/*

Задание 5: Задачи на написание алгоритмов с циклами (for, while)

5a. В задаче будем использовать функцию rand() она из заданного диапазона значений выбирает одно случайное.
Необходимо определить пессимист компьютер или оптимист.
Пусть $computer = rand(0,1). Если $computer выбирает 0, то он пессимист, если выбирает 1, то он оптимист.
Выполнить опрос компьютера 100 раз и вывести на экран по итогу всех этих итераций вывод - пессимист этот компьютер сегодня/сейчас или оптимист.
Подсказка: не нужно выводить 100 раз пессимист/оптимист, а нужен итог с цифрами, типа на 55% оптимист.


*/



/*

5b. В переменной $password хранится шестизначный пароль, состоящий только из цифр, например 302390.
Необходимо написать программу которая методом перебора найдет пароль.
Подсказка: 012345 - тоже вариант пароля.

*/



/*

5c. В переменных $pass1 и $pass2 хранятся трехзначные пароли.
Мы уже подобрали пароль $pass1, например он равен 436.
Пароль $pass2 удалось получить только в зашифрованном виде $pass2Se.
Мы узнали что шифр был сделан по следующему правилу - если "вторая цифра из $pass1" больше 5, то $pass2 = "цифра первого разряда из $pass2Se" . "число второго разряда из $pass2Se" . "число третьего разряда из $pass2Se", а если "второе число из $pass1" меньше либо равно 5, то $pass2 = "цифра второго разряда из $pass2Se" . "цифра третьего разряда из $pass2Se" . "цифра первого разряда из $pass2Se".
Вывести на экран $pass2 и описание правила по которому этот пароль был расшифрован из $pass2Se.
Значение для переменной $pass2Se задайте на своё усмотрение.

*/



/*

5d. Для предыдущей задачи написать алгоритм шифрования пароля $pass2

*/



/*

Задание 6: Задачи на выбор типов данных

6a. Даны два одноразрядных числа заданных с помощью слов (например $a='семь' и b='четыре').
Вывести на экран, в виде числа, результат сложения этих цифр.
Проверить результат сложения на разрядность, если разрядность больше 1, то вывести сообщение "большое число", иначе вывести сообщение "маленькое число".

*/



/*

6b. Предположим у нас в программе цены хранятся в виде целых чисел, но фактически - два последних разряда числа обозначают копейки.
Например, цена товара хранится в виде 10050, это значит что товар стоит 100 рублей 50 копеек.
Написать программу которая выведет на экран цену в двух форматах "N рубл[ей/я] M копе[ек/ки]." и "N.M руб." увеличив при этом цену товара на 13 процентов.
В программе использовать оператор % ($a % $b - целочисленный остаток от деления $a на $b).

*/



/*

6c. Как известно, при переводе IP-адреса компьютера в число, мы экономим ресурсы памяти, так как IP-адрес в четвертой версии — это 32-х битовое число и запись в строчном виде 192.168.1.1 будет занимать 15 байт, а в числовом виде всего 4 байта.
При этом удобной формой записи является запись в виде четырёх десятичных чисел значением от 0 до 255, разделённых точками, например, 192.0.2.60. но для хранения его в базе данных лучше перевести его в десятичное целое число.
Например 192.168.1.1 — это одно и то же, что 3232235777.
Алгоритм перевода строковой записи IP4 в числовую такой X = Y1 * 256 ^ 0 + Y2 * 256 ^ 1 + Y3 * 256 ^ 2 + Y4 * 256 ^3 (где ip адрес имеет формат Y4.Y3.Y2.Y1) Написать перевести алгоритм в php-код.
Пользователь программы вводит на входе $IP = '123.123.123.123' или $IP = 3232235777, программа должна определить какого вида IP ввел пользователь и показать альтернативную запись.
Для обработки адреса с "точкой" использовать функцию substr() - возвращает подстроку строки string длиной length, начинающегося с start символа по счету)

*/
?>